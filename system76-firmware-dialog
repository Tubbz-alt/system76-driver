#!/usr/bin/python3

# system76-driver: Universal driver for System76 computers
# Copyright (C) 2005-2016 System76, Inc.
#
# This file is part of `system76-driver`.
#
# `system76-driver` is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# `system76-driver` is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with `system76-driver`; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import gi
gi.require_version('Gtk', '3.0')

from gi.repository import Gio
from gi.repository import Gtk
from gi.repository import GLib
from gi.repository import Notify
import os, sys, time
import json

USES_NOTIFICATIONS = ['gnome']

NOTIFICATION_TIMEOUT = 24*60*60 # 24 hours

class FirmwareDialog(Gtk.MessageDialog):
    def __init__(self, parent):
        Gtk.MessageDialog.__init__(self, parent, 0, Gtk.MessageType.QUESTION,
                Gtk.ButtonsType.YES_NO, "New Firmware is available.\nInstall on next reboot?")
        self.changes = get_changes(markup=True)
        message_area = self.get_message_area()
        if self.changes:
            self.set_markup("<b>New firmware is available with the following features:</b>")
            changes_label = Gtk.Label(get_changes(markup=True), use_markup=True)
            changes_label.set_valign(Gtk.Align.START)
            changes_label.set_halign(Gtk.Align.START)
            changes_label.set_vexpand(False)
            message_area.pack_start(changes_label, False, False, 0)
            changes_label.show()
        
        details_button = Gtk.LinkButton("", "Update Details")
        details_button.set_halign(Gtk.Align.START)
        details_button.connect("clicked", self.on_details)
        message_area.pack_start(details_button, False, True, 0)
        details_button.show()
        
        question_label = Gtk.Label("<b>Install firmware during the next reboot?</b>", use_markup=True)
        question_label.set_halign(Gtk.Align.START)
        message_area.pack_start(question_label, False, True, 0)
        question_label.show()
        
        self.set_default_response(Gtk.ResponseType.YES)
        button_yes = self.get_widget_for_response(Gtk.ResponseType.YES)
        button_yes.set_label("Install firmware")
        button_yes.get_style_context().add_class(Gtk.STYLE_CLASS_SUGGESTED_ACTION)
        button_yes.grab_focus()
        button_no = self.get_widget_for_response(Gtk.ResponseType.NO)
        button_no.set_label("Remind me later")
        
        image = Gtk.Image()
        image.set_from_icon_name('system76-driver', Gtk.IconSize.DIALOG)
        image.show()
        self.set_image(image)
        
        self.set_keep_above(True)
        self.set_skip_taskbar_hint(False)
        self.set_title("System76 Firmware Updater")
        self.set_icon_name("system76-driver")
        
    def on_details(self, e):
        #Popen(['pkexec', 'system76-firmware'])#, env=dict(os.environ, **{'XAUTHORITY': '/run/user/1000/gdm/Xauthority'}))
        os._exit(2)
        

class App(Gtk.Application):
    def __init__(self):
        Gtk.Application.__init__(self,
                         application_id="com.system76.firmware-updater",
                         flags=Gio.ApplicationFlags.FLAGS_NONE)
    
    def do_activate(self):
        dialog = FirmwareDialog(Gtk.Window())
        response = dialog.run()
        if response == Gtk.ResponseType.YES:
            os._exit(0)
        else:
            os._exit(1)

def notification_closed(argy):
    global got_action
    if got_action[0] == False:
        os._exit(1)
    else:
        try:
            app = App()
            app.run(sys.argv)
        except:
            return

got_action = [False]

def notification_action(notification, action=None, data=None):
    global got_action
    got_action[0] = True
    app = App()
    app.run(sys.argv)

def get_changes(changes_var='FIRMWARE_CHANGES', markup=False):
    input = json.loads(os.environ.get(changes_var))
    if markup:
        changes = "<span>"
        for change in input:
            changes = changes + "<span> - " + change + "</span>\n"
        return changes[:-1] + "</span>"
    else:
        changes = ""
        for change in input:
            if changes == "":
                changes = str(change)
            else:
                changes = changes  + ", " + str(change)
        return changes

def send_notification():
    mainloop = GLib.MainLoop()
    
    changes = json.loads(os.environ.get('FIRMWARE_CHANGES'))
    
    Notify.init("system76-firmware-dialog")
    notification = Notify.Notification.new("New firmware available...", "")#get_changes())
    notification.connect("closed", notification_closed)
    notification.add_action("default", "Default Action", notification_action)
    notification.add_action("update_firmware", "Install Firmware...", notification_action, None)
    notification.show()
    
    # Cancel this notification just before then next one starts.
    GLib.timeout_add_seconds(NOTIFICATION_TIMEOUT, notification.close)
    mainloop.run()


desktop_env = os.environ.get('NOTIFICATION_ENVIRONMENT')

#Show a notification if the desktop environment has the right capabilities
# Gnome allows the user to interact with the notification and open our dialog.
# Unity doesn't allow interaction, so we skip straight to the message dialog.
if desktop_env in USES_NOTIFICATIONS:
    send_notification()
else:
    pass
    dialog = FirmwareDialog(Gtk.Window())
    response = dialog.run()
    if response == Gtk.ResponseType.YES:
        os._exit(0)
    else:
        os._exit(1)
