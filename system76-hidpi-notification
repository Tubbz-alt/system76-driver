#!/usr/bin/python3

# system76-driver: Universal driver for System76 computers
# Copyright (C) 2005-2017 System76, Inc.
#
# This file is part of `system76-driver`.
#
# `system76-driver` is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# `system76-driver` is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with `system76-driver`; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
HiDPI daemon to workaround X Server scaling limitations.
"""

import time
start_time = time.monotonic()
import argparse
import os
import sys

import signal

import gi
gi.require_version('Notify', '0.7')

from gi.repository import Notify
from gi.repository import GLib

import system76driver

parser = argparse.ArgumentParser()
parser.add_argument('--scale-mode', help='Current scale mode: hidpi or lowdpi')
parser.add_argument('--gpu-vendor', help='GPU Vendor: intel or nvidia')
args = parser.parse_args()

class HiDPINotification:
    def __init__(self, scale_mode, gpu_vendor):
        mainloop = GLib.MainLoop()
        Notify.init("System76 HiDPI Scaling")
        
        self.gpu_vendor = gpu_vendor
        self.scale_mode = scale_mode
        header = str(scale_mode) + str(gpu_vendor)
        message = str(scale_mode) + str(gpu_vendor)
        action = str(scale_mode) + str(gpu_vendor)
        
        if self.gpu_vendor == 'intel':
            if scale_mode == 'lowdpi':
                header = "Displays Set to Optimized Mode"
                message = "Select to set resolution and scaling to Native Mode."
                action = "Revert"
            else:
                header = "Displays Set to Native Mode"
                message = "Select to set resolution and scaling to Optimized Mode."
                action = "Set Uniform Scale"
        elif self.gpu_vendor == 'nvidia': # nvidia
            if scale_mode == 'hidpi':
                header = "Displays Set to HiDPI Mode"
                message = "Select for LoDPI, increased performance, and app compatibility."
                action = "Switch to LoDPI"
            else:
                header = "Displays Set to LoDPI Mode"
                message = "Select to set HiDPI for crisper display."
                action = "Switch to HiDPI"
        
        self.notification = Notify.Notification.new(header, message, "preferences-desktop-display")
        self.notification.connect("closed", self.notification_closed)
        self.notification.add_action("default", action, self.notification_action)
        self.notification.show()
        
        GLib.unix_signal_add(GLib.PRIORITY_HIGH, signal.SIGTERM, self.terminate, None)
        
        mainloop.run()
        
    def terminate(self, arg):
        self.notification.close()
    
    def notification_closed(self, argy):
        os._exit(0)
    
    def notification_action(self, notification, action=None, data=None):
        os._exit(76)

hidpi = HiDPINotification(args.scale_mode, args.gpu_vendor)
